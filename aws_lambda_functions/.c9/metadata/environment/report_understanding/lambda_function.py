{"filter":false,"title":"lambda_function.py","tooltip":"/report_understanding/lambda_function.py","undoManager":{"mark":53,"position":53,"stack":[[{"start":{"row":30,"column":0},"end":{"row":30,"column":85},"action":"remove","lines":["You are an AI assistant helping users understand their Prudential insurance coverage."],"id":2},{"start":{"row":30,"column":0},"end":{"row":32,"column":77},"action":"insert","lines":["You are a doctor explaining the medical report to your patient. Use the information provided in the documents to answer the question.","You must answer the question based on the provided context. If the answer is not in the documents, say \"I don't know\" or \"The documents do not contain that information.\"","Make the answer concise and clear, as if you were explaining it to a patient."]}],[{"start":{"row":9,"column":18},"end":{"row":9,"column":50},"action":"remove","lines":["lroy-and-co-insurance-docs-parse"],"id":3}],[{"start":{"row":9,"column":18},"end":{"row":9,"column":19},"action":"remove","lines":["d"],"id":4},{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"remove","lines":["e"]}],[{"start":{"row":9,"column":17},"end":{"row":9,"column":44},"action":"insert","lines":["elroy-and-co-medical-report"],"id":5}],[{"start":{"row":9,"column":43},"end":{"row":9,"column":44},"action":"remove","lines":["t"],"id":6},{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"remove","lines":["r"]},{"start":{"row":9,"column":41},"end":{"row":9,"column":42},"action":"remove","lines":["o"]},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"remove","lines":["p"]},{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"remove","lines":["e"]},{"start":{"row":9,"column":38},"end":{"row":9,"column":39},"action":"remove","lines":["r"]}],[{"start":{"row":9,"column":38},"end":{"row":9,"column":39},"action":"insert","lines":["h"],"id":7},{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"insert","lines":["i"]},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"insert","lines":["s"]},{"start":{"row":9,"column":41},"end":{"row":9,"column":42},"action":"insert","lines":["t"]},{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"insert","lines":["o"]},{"start":{"row":9,"column":43},"end":{"row":9,"column":44},"action":"insert","lines":["r"]},{"start":{"row":9,"column":44},"end":{"row":9,"column":45},"action":"insert","lines":["y"]}],[{"start":{"row":30,"column":1},"end":{"row":32,"column":77},"action":"remove","lines":["ou are a doctor explaining the medical report to your patient. Use the information provided in the documents to answer the question.","You must answer the question based on the provided context. If the answer is not in the documents, say \"I don't know\" or \"The documents do not contain that information.\"","Make the answer concise and clear, as if you were explaining it to a patient."],"id":8},{"start":{"row":30,"column":1},"end":{"row":30,"column":2},"action":"insert","lines":["o"]},{"start":{"row":30,"column":2},"end":{"row":30,"column":3},"action":"insert","lines":["u"]}],[{"start":{"row":30,"column":3},"end":{"row":30,"column":4},"action":"insert","lines":[" "],"id":9},{"start":{"row":30,"column":4},"end":{"row":30,"column":5},"action":"insert","lines":["a"]},{"start":{"row":30,"column":5},"end":{"row":30,"column":6},"action":"insert","lines":["r"]},{"start":{"row":30,"column":6},"end":{"row":30,"column":7},"action":"insert","lines":["e"]}],[{"start":{"row":30,"column":7},"end":{"row":30,"column":8},"action":"insert","lines":[" "],"id":10},{"start":{"row":30,"column":8},"end":{"row":30,"column":9},"action":"insert","lines":["a"]}],[{"start":{"row":30,"column":9},"end":{"row":30,"column":10},"action":"insert","lines":[" "],"id":11},{"start":{"row":30,"column":10},"end":{"row":30,"column":11},"action":"insert","lines":["c"]},{"start":{"row":30,"column":11},"end":{"row":30,"column":12},"action":"insert","lines":["a"]},{"start":{"row":30,"column":12},"end":{"row":30,"column":13},"action":"insert","lines":["r"]},{"start":{"row":30,"column":13},"end":{"row":30,"column":14},"action":"insert","lines":["e"]},{"start":{"row":30,"column":14},"end":{"row":30,"column":15},"action":"insert","lines":["t"]},{"start":{"row":30,"column":15},"end":{"row":30,"column":16},"action":"insert","lines":["a"]},{"start":{"row":30,"column":16},"end":{"row":30,"column":17},"action":"insert","lines":["k"]},{"start":{"row":30,"column":17},"end":{"row":30,"column":18},"action":"insert","lines":["e"]},{"start":{"row":30,"column":18},"end":{"row":30,"column":19},"action":"insert","lines":["r"]}],[{"start":{"row":30,"column":19},"end":{"row":30,"column":20},"action":"insert","lines":[" "],"id":12},{"start":{"row":30,"column":20},"end":{"row":30,"column":21},"action":"insert","lines":["a"]},{"start":{"row":30,"column":21},"end":{"row":30,"column":22},"action":"insert","lines":["n"]},{"start":{"row":30,"column":22},"end":{"row":30,"column":23},"action":"insert","lines":["d"]}],[{"start":{"row":30,"column":23},"end":{"row":30,"column":24},"action":"insert","lines":[" "],"id":13},{"start":{"row":30,"column":24},"end":{"row":30,"column":25},"action":"insert","lines":["d"]},{"start":{"row":30,"column":25},"end":{"row":30,"column":26},"action":"insert","lines":["o"]},{"start":{"row":30,"column":26},"end":{"row":30,"column":27},"action":"insert","lines":["c"]},{"start":{"row":30,"column":27},"end":{"row":30,"column":28},"action":"insert","lines":["t"]},{"start":{"row":30,"column":28},"end":{"row":30,"column":29},"action":"insert","lines":["o"]},{"start":{"row":30,"column":29},"end":{"row":30,"column":30},"action":"insert","lines":["r"]}],[{"start":{"row":30,"column":30},"end":{"row":30,"column":31},"action":"insert","lines":[" "],"id":14},{"start":{"row":30,"column":31},"end":{"row":30,"column":32},"action":"insert","lines":["e"]},{"start":{"row":30,"column":32},"end":{"row":30,"column":33},"action":"insert","lines":["x"]},{"start":{"row":30,"column":33},"end":{"row":30,"column":34},"action":"insert","lines":["p"]},{"start":{"row":30,"column":34},"end":{"row":30,"column":35},"action":"insert","lines":["l"]},{"start":{"row":30,"column":35},"end":{"row":30,"column":36},"action":"insert","lines":["a"]},{"start":{"row":30,"column":36},"end":{"row":30,"column":37},"action":"insert","lines":["i"]},{"start":{"row":30,"column":37},"end":{"row":30,"column":38},"action":"insert","lines":["n"]},{"start":{"row":30,"column":38},"end":{"row":30,"column":39},"action":"insert","lines":["i"]},{"start":{"row":30,"column":39},"end":{"row":30,"column":40},"action":"insert","lines":["n"]},{"start":{"row":30,"column":40},"end":{"row":30,"column":41},"action":"insert","lines":["g"]}],[{"start":{"row":30,"column":41},"end":{"row":30,"column":42},"action":"insert","lines":[" "],"id":15},{"start":{"row":30,"column":42},"end":{"row":30,"column":43},"action":"insert","lines":["t"]},{"start":{"row":30,"column":43},"end":{"row":30,"column":44},"action":"insert","lines":["h"]},{"start":{"row":30,"column":44},"end":{"row":30,"column":45},"action":"insert","lines":["e"]}],[{"start":{"row":30,"column":45},"end":{"row":30,"column":46},"action":"insert","lines":[" "],"id":16},{"start":{"row":30,"column":46},"end":{"row":30,"column":47},"action":"insert","lines":["q"]},{"start":{"row":30,"column":47},"end":{"row":30,"column":48},"action":"insert","lines":["u"]},{"start":{"row":30,"column":48},"end":{"row":30,"column":49},"action":"insert","lines":["e"]},{"start":{"row":30,"column":49},"end":{"row":30,"column":50},"action":"insert","lines":["r"]}],[{"start":{"row":30,"column":50},"end":{"row":30,"column":51},"action":"insert","lines":["i"],"id":17},{"start":{"row":30,"column":51},"end":{"row":30,"column":52},"action":"insert","lines":["e"]},{"start":{"row":30,"column":52},"end":{"row":30,"column":53},"action":"insert","lines":["s"]}],[{"start":{"row":30,"column":53},"end":{"row":30,"column":54},"action":"insert","lines":[" "],"id":18},{"start":{"row":30,"column":54},"end":{"row":30,"column":55},"action":"insert","lines":["t"]}],[{"start":{"row":30,"column":54},"end":{"row":30,"column":55},"action":"remove","lines":["t"],"id":19}],[{"start":{"row":30,"column":54},"end":{"row":30,"column":55},"action":"insert","lines":["t"],"id":20}],[{"start":{"row":30,"column":54},"end":{"row":30,"column":55},"action":"remove","lines":["t"],"id":21}],[{"start":{"row":30,"column":54},"end":{"row":30,"column":55},"action":"insert","lines":["y"],"id":22},{"start":{"row":30,"column":55},"end":{"row":30,"column":56},"action":"insert","lines":["o"]},{"start":{"row":30,"column":56},"end":{"row":30,"column":57},"action":"insert","lines":["u"]},{"start":{"row":30,"column":57},"end":{"row":30,"column":58},"action":"insert","lines":["r"]}],[{"start":{"row":30,"column":58},"end":{"row":30,"column":59},"action":"insert","lines":[" "],"id":23},{"start":{"row":30,"column":59},"end":{"row":30,"column":60},"action":"insert","lines":["p"]},{"start":{"row":30,"column":60},"end":{"row":30,"column":61},"action":"insert","lines":["a"]},{"start":{"row":30,"column":61},"end":{"row":30,"column":62},"action":"insert","lines":["t"]},{"start":{"row":30,"column":62},"end":{"row":30,"column":63},"action":"insert","lines":["i"]},{"start":{"row":30,"column":63},"end":{"row":30,"column":64},"action":"insert","lines":["e"]},{"start":{"row":30,"column":64},"end":{"row":30,"column":65},"action":"insert","lines":["n"]},{"start":{"row":30,"column":65},"end":{"row":30,"column":66},"action":"insert","lines":["t"]}],[{"start":{"row":30,"column":66},"end":{"row":30,"column":67},"action":"insert","lines":[" "],"id":24},{"start":{"row":30,"column":67},"end":{"row":30,"column":68},"action":"insert","lines":["h"]},{"start":{"row":30,"column":68},"end":{"row":30,"column":69},"action":"insert","lines":["a"]},{"start":{"row":30,"column":69},"end":{"row":30,"column":70},"action":"insert","lines":["s"]}],[{"start":{"row":30,"column":70},"end":{"row":30,"column":71},"action":"insert","lines":[" "],"id":25},{"start":{"row":30,"column":71},"end":{"row":30,"column":72},"action":"insert","lines":["a"]},{"start":{"row":30,"column":72},"end":{"row":30,"column":73},"action":"insert","lines":["b"]},{"start":{"row":30,"column":73},"end":{"row":30,"column":74},"action":"insert","lines":["o"]},{"start":{"row":30,"column":74},"end":{"row":30,"column":75},"action":"insert","lines":["u"]},{"start":{"row":30,"column":75},"end":{"row":30,"column":76},"action":"insert","lines":["t"]}],[{"start":{"row":30,"column":76},"end":{"row":30,"column":77},"action":"insert","lines":[" "],"id":26},{"start":{"row":30,"column":77},"end":{"row":30,"column":78},"action":"insert","lines":["t"]},{"start":{"row":30,"column":78},"end":{"row":30,"column":79},"action":"insert","lines":["h"]},{"start":{"row":30,"column":79},"end":{"row":30,"column":80},"action":"insert","lines":["e"]},{"start":{"row":30,"column":80},"end":{"row":30,"column":81},"action":"insert","lines":["i"]},{"start":{"row":30,"column":81},"end":{"row":30,"column":82},"action":"insert","lines":["r"]}],[{"start":{"row":30,"column":82},"end":{"row":30,"column":83},"action":"insert","lines":[" "],"id":27},{"start":{"row":30,"column":83},"end":{"row":30,"column":84},"action":"insert","lines":["m"]},{"start":{"row":30,"column":84},"end":{"row":30,"column":85},"action":"insert","lines":["e"]},{"start":{"row":30,"column":85},"end":{"row":30,"column":86},"action":"insert","lines":["d"]},{"start":{"row":30,"column":86},"end":{"row":30,"column":87},"action":"insert","lines":["i"]},{"start":{"row":30,"column":87},"end":{"row":30,"column":88},"action":"insert","lines":["c"]},{"start":{"row":30,"column":88},"end":{"row":30,"column":89},"action":"insert","lines":["a"]},{"start":{"row":30,"column":89},"end":{"row":30,"column":90},"action":"insert","lines":["l"]}],[{"start":{"row":30,"column":90},"end":{"row":30,"column":91},"action":"insert","lines":[" "],"id":28},{"start":{"row":30,"column":91},"end":{"row":30,"column":92},"action":"insert","lines":["h"]},{"start":{"row":30,"column":92},"end":{"row":30,"column":93},"action":"insert","lines":["i"]},{"start":{"row":30,"column":93},"end":{"row":30,"column":94},"action":"insert","lines":["s"]},{"start":{"row":30,"column":94},"end":{"row":30,"column":95},"action":"insert","lines":["t"]},{"start":{"row":30,"column":95},"end":{"row":30,"column":96},"action":"insert","lines":["o"]},{"start":{"row":30,"column":96},"end":{"row":30,"column":97},"action":"insert","lines":["r"]},{"start":{"row":30,"column":97},"end":{"row":30,"column":98},"action":"insert","lines":["y"]}],[{"start":{"row":30,"column":98},"end":{"row":30,"column":99},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":30,"column":98},"end":{"row":30,"column":99},"action":"remove","lines":[" "],"id":30}],[{"start":{"row":30,"column":98},"end":{"row":30,"column":99},"action":"insert","lines":["."],"id":31}],[{"start":{"row":30,"column":99},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":32}],[{"start":{"row":30,"column":99},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":33}],[{"start":{"row":31,"column":0},"end":{"row":34,"column":0},"action":"insert","lines":[" Use the information provided in the documents to answer the question.","You must answer the question based on the provided context. If the answer is not in the documents, say \"I don't know\" or \"The documents do not contain that information.\"","Make the answer concise and clear, as if you were explaining it to a patient.",""],"id":34}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":1},"action":"remove","lines":[" "],"id":35}],[{"start":{"row":9,"column":38},"end":{"row":9,"column":45},"action":"remove","lines":["history"],"id":36}],[{"start":{"row":9,"column":38},"end":{"row":9,"column":39},"action":"insert","lines":["r"],"id":37},{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"insert","lines":["e"]},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"insert","lines":["p"]},{"start":{"row":9,"column":41},"end":{"row":9,"column":42},"action":"insert","lines":["o"]},{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"insert","lines":["r"]},{"start":{"row":9,"column":43},"end":{"row":9,"column":44},"action":"insert","lines":["t"]}],[{"start":{"row":18,"column":1},"end":{"row":130,"column":0},"action":"insert","lines":["import json, os, boto3","from openai import OpenAI","","# ─── Config via env-vars ──────────────────────────────────────────────","PARSED_BUCKET       = os.environ.get(\"PARSED_BUCKET\", \"elroy-and-co-insurance-docs-parsed\")","SAMBANOVA_API_KEY   = \"d830ceb2-cd0a-464b-b6b0-82a5f5710746\"","SAMBANOVA_API_BASE  = os.environ.get(\"SAMBANOVA_API_BASE\", \"https://api.sambanova.ai/v1\")","MODEL_ID            = os.environ.get(\"MODEL_ID\", \"QwQ-32B\")","","# 0-to-disable, or e.g. 1500 to return first 1 500 chars only","PROMPT_PREVIEW_LEN  = int(os.environ.get(\"PROMPT_PREVIEW_LEN\", \"0\"))","","# ─── Clients ─────────────────────────────────────────────────────────","s3      = boto3.client(\"s3\")","client  = OpenAI(api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\", base_url=SAMBANOVA_API_BASE)","","# ─── Helpers ─────────────────────────────────────────────────────────","def list_txt(bucket: str) -> list[str]:","    keys = []","    paginator = s3.get_paginator(\"list_objects_v2\")","    for page in paginator.paginate(Bucket=bucket):","        keys.extend(k[\"Key\"] for k in page.get(\"Contents\", []) if k[\"Key\"].endswith(\".txt\"))","    return keys","","def read_txt(bucket: str, key: str) -> str:","    obj = s3.get_object(Bucket=bucket, Key=key)","    return obj[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context: str, question: str) -> str:","    return f\"\"\"","You are an expert insurance-policy assistant. Use **ONLY** the text in the CONTEXT to answer.","","RULES","1. Reply with valid JSON containing a single key \"answer\".","2. \"answer\" must be **exactly three short sentences** (≤ 20 words each):","   • Sentence 1 – start with Yes/No + conclusion.","   • Sentence 2 – cite one clause/page as evidence.","   • Sentence 3 – give next steps (claim form, deadline, etc.).","   - Dont include the reasoning in the answer","3. Output **nothing** outside that JSON object.","4. Remove any special characters","","","CONTEXT","{context}","","QUESTION","{question}","","Return only the JSON object described in rule 1.","\"\"\".strip()","","def query_llm(prompt: str) -> str:","    resp = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0,","        top_p=0.9,","    )","    return resp.choices[0].message.content","","# ─── Lambda entry-point ───────────────────────────────────────────────","def lambda_handler(event, context):","    # 1. Parse request","    try:","        body = event.get(\"body\", event)","        if isinstance(body, str):","            body = json.loads(body)","        question = body[\"question\"]","    except Exception as exc:","        return {\"statusCode\": 400, \"body\": json.dumps(f\"Invalid request: {exc}\")}","","    # 2. Assemble context from S3","    context_txt = \"\"","    for key in list_txt(PARSED_BUCKET):","        try:","            context_txt += f\"\\n\\n--- {key} ---\\n\\n{read_txt(PARSED_BUCKET, key)}\"","        except Exception as exc:","            context_txt += f\"\\n\\n--- Error reading {key}: {exc} ---\\n\\n\"","","    # 3. Build prompt & query model","    prompt = build_prompt(context_txt, question)","    # answer = query_llm(prompt)","","    # 4. Optionally truncate the prompt we echo back","    raw_reply =query_llm(prompt)          # ← returns one string, e.g. '{\"answer\":\"…\"}'","","    # --- 4. Extract the answer safely -----------------------------------","    try:","        # normal path: the model followed the rules","        final_answer = json.loads(raw_reply)[\"answer\"]","","    except (json.JSONDecodeError, KeyError):","        # model added extra text → grab the last {...}","        brace = raw_reply.rfind(\"{\")","        if brace != -1:","            final_answer = json.loads(raw_reply[brace:]).get(\"answer\", raw_reply)","        else:","            final_answer = raw_reply","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\":  \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\",","        },","        \"body\":","            json.dumps({","            \"question\": question,","            \"answer\":  final_answer        # ← echoed for debugging","        })","    }",""],"id":38}],[{"start":{"row":0,"column":0},"end":{"row":210,"column":0},"action":"remove","lines":["import boto3","import json","import os","from openai import OpenAI","","# Initialize S3 client","s3 = boto3.client(\"s3\")","","# Your bucket with pre-parsed .txt files from PDFs","PARSED_BUCKET = \"elroy-and-co-medical-report\"","","# SambaNova config","MODEL_ID = \"Llama-4-Maverick-17B-128E-Instruct\"","SAMBANOVA_API_BASE = \"https://api.sambanova.ai/v1\"","","client = OpenAI(","    api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\",","    base_url=SAMBANOVA_API_BASE,",")import json, os, boto3","from openai import OpenAI","","# ─── Config via env-vars ──────────────────────────────────────────────","PARSED_BUCKET       = os.environ.get(\"PARSED_BUCKET\", \"elroy-and-co-insurance-docs-parsed\")","SAMBANOVA_API_KEY   = \"d830ceb2-cd0a-464b-b6b0-82a5f5710746\"","SAMBANOVA_API_BASE  = os.environ.get(\"SAMBANOVA_API_BASE\", \"https://api.sambanova.ai/v1\")","MODEL_ID            = os.environ.get(\"MODEL_ID\", \"QwQ-32B\")","","# 0-to-disable, or e.g. 1500 to return first 1 500 chars only","PROMPT_PREVIEW_LEN  = int(os.environ.get(\"PROMPT_PREVIEW_LEN\", \"0\"))","","# ─── Clients ─────────────────────────────────────────────────────────","s3      = boto3.client(\"s3\")","client  = OpenAI(api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\", base_url=SAMBANOVA_API_BASE)","","# ─── Helpers ─────────────────────────────────────────────────────────","def list_txt(bucket: str) -> list[str]:","    keys = []","    paginator = s3.get_paginator(\"list_objects_v2\")","    for page in paginator.paginate(Bucket=bucket):","        keys.extend(k[\"Key\"] for k in page.get(\"Contents\", []) if k[\"Key\"].endswith(\".txt\"))","    return keys","","def read_txt(bucket: str, key: str) -> str:","    obj = s3.get_object(Bucket=bucket, Key=key)","    return obj[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context: str, question: str) -> str:","    return f\"\"\"","You are an expert insurance-policy assistant. Use **ONLY** the text in the CONTEXT to answer.","","RULES","1. Reply with valid JSON containing a single key \"answer\".","2. \"answer\" must be **exactly three short sentences** (≤ 20 words each):","   • Sentence 1 – start with Yes/No + conclusion.","   • Sentence 2 – cite one clause/page as evidence.","   • Sentence 3 – give next steps (claim form, deadline, etc.).","   - Dont include the reasoning in the answer","3. Output **nothing** outside that JSON object.","4. Remove any special characters","","","CONTEXT","{context}","","QUESTION","{question}","","Return only the JSON object described in rule 1.","\"\"\".strip()","","def query_llm(prompt: str) -> str:","    resp = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0,","        top_p=0.9,","    )","    return resp.choices[0].message.content","","# ─── Lambda entry-point ───────────────────────────────────────────────","def lambda_handler(event, context):","    # 1. Parse request","    try:","        body = event.get(\"body\", event)","        if isinstance(body, str):","            body = json.loads(body)","        question = body[\"question\"]","    except Exception as exc:","        return {\"statusCode\": 400, \"body\": json.dumps(f\"Invalid request: {exc}\")}","","    # 2. Assemble context from S3","    context_txt = \"\"","    for key in list_txt(PARSED_BUCKET):","        try:","            context_txt += f\"\\n\\n--- {key} ---\\n\\n{read_txt(PARSED_BUCKET, key)}\"","        except Exception as exc:","            context_txt += f\"\\n\\n--- Error reading {key}: {exc} ---\\n\\n\"","","    # 3. Build prompt & query model","    prompt = build_prompt(context_txt, question)","    # answer = query_llm(prompt)","","    # 4. Optionally truncate the prompt we echo back","    raw_reply =query_llm(prompt)          # ← returns one string, e.g. '{\"answer\":\"…\"}'","","    # --- 4. Extract the answer safely -----------------------------------","    try:","        # normal path: the model followed the rules","        final_answer = json.loads(raw_reply)[\"answer\"]","","    except (json.JSONDecodeError, KeyError):","        # model added extra text → grab the last {...}","        brace = raw_reply.rfind(\"{\")","        if brace != -1:","            final_answer = json.loads(raw_reply[brace:]).get(\"answer\", raw_reply)","        else:","            final_answer = raw_reply","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\":  \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\",","        },","        \"body\":","            json.dumps({","            \"question\": question,","            \"answer\":  final_answer        # ← echoed for debugging","        })","    }","","","def list_txt_files(bucket):","    response = s3.list_objects_v2(Bucket=bucket)","    return [obj[\"Key\"] for obj in response.get(\"Contents\", []) if obj[\"Key\"].endswith(\".txt\")]","","def read_txt(bucket, key):","    response = s3.get_object(Bucket=bucket, Key=key)","    return response[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context, question):","    return f\"\"\"","You are a caretaker and doctor explaining the queries your patient has about their medical history.","Use the information provided in the documents to answer the question.","You must answer the question based on the provided context. If the answer is not in the documents, say \"I don't know\" or \"The documents do not contain that information.\"","Make the answer concise and clear, as if you were explaining it to a patient.","","","","### DOCUMENTS:","{context}","","### QUESTION:","{question}","","### ANSWER:","\"\"\"","","def query_sambanova(prompt):","    response = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0.3,","        top_p=0.9","    )","    return response.choices[0].message.content","","def lambda_handler(event, context):","    try:","        body = event.get(\"body\")","        if isinstance(body, str):","            body = json.loads(body)","        question = body.get(\"question\")","    except Exception as e:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Invalid request structure.\")","        }","","    if not question:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Missing 'question' in request.\")","        }","","    # Read and merge context","    combined_text = \"\"","    for key in list_txt_files(PARSED_BUCKET):","        try:","            text = read_txt(PARSED_BUCKET, key)","            combined_text += f\"\\n\\n--- {key} ---\\n\\n{text}\"","        except Exception as e:","            combined_text += f\"\\n\\n--- Error reading {key}: {str(e)} ---\\n\\n\"","","    # Build prompt and query LLM","    prompt = build_prompt(combined_text, question)","    answer = query_sambanova(prompt)","","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\": \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\"","        },","        \"body\": json.dumps({","            \"question\": question,","            \"answer\": answer","        })","    }",""],"id":39},{"start":{"row":0,"column":0},"end":{"row":112,"column":0},"action":"insert","lines":["import json, os, boto3","from openai import OpenAI","","# ─── Config via env-vars ──────────────────────────────────────────────","PARSED_BUCKET       = os.environ.get(\"PARSED_BUCKET\", \"elroy-and-co-insurance-docs-parsed\")","SAMBANOVA_API_KEY   = \"d830ceb2-cd0a-464b-b6b0-82a5f5710746\"","SAMBANOVA_API_BASE  = os.environ.get(\"SAMBANOVA_API_BASE\", \"https://api.sambanova.ai/v1\")","MODEL_ID            = os.environ.get(\"MODEL_ID\", \"QwQ-32B\")","","# 0-to-disable, or e.g. 1500 to return first 1 500 chars only","PROMPT_PREVIEW_LEN  = int(os.environ.get(\"PROMPT_PREVIEW_LEN\", \"0\"))","","# ─── Clients ─────────────────────────────────────────────────────────","s3      = boto3.client(\"s3\")","client  = OpenAI(api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\", base_url=SAMBANOVA_API_BASE)","","# ─── Helpers ─────────────────────────────────────────────────────────","def list_txt(bucket: str) -> list[str]:","    keys = []","    paginator = s3.get_paginator(\"list_objects_v2\")","    for page in paginator.paginate(Bucket=bucket):","        keys.extend(k[\"Key\"] for k in page.get(\"Contents\", []) if k[\"Key\"].endswith(\".txt\"))","    return keys","","def read_txt(bucket: str, key: str) -> str:","    obj = s3.get_object(Bucket=bucket, Key=key)","    return obj[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context: str, question: str) -> str:","    return f\"\"\"","You are an expert insurance-policy assistant. Use **ONLY** the text in the CONTEXT to answer.","","RULES","1. Reply with valid JSON containing a single key \"answer\".","2. \"answer\" must be **exactly three short sentences** (≤ 20 words each):","   • Sentence 1 – start with Yes/No + conclusion.","   • Sentence 2 – cite one clause/page as evidence.","   • Sentence 3 – give next steps (claim form, deadline, etc.).","   - Dont include the reasoning in the answer","3. Output **nothing** outside that JSON object.","4. Remove any special characters","","","CONTEXT","{context}","","QUESTION","{question}","","Return only the JSON object described in rule 1.","\"\"\".strip()","","def query_llm(prompt: str) -> str:","    resp = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0,","        top_p=0.9,","    )","    return resp.choices[0].message.content","","# ─── Lambda entry-point ───────────────────────────────────────────────","def lambda_handler(event, context):","    # 1. Parse request","    try:","        body = event.get(\"body\", event)","        if isinstance(body, str):","            body = json.loads(body)","        question = body[\"question\"]","    except Exception as exc:","        return {\"statusCode\": 400, \"body\": json.dumps(f\"Invalid request: {exc}\")}","","    # 2. Assemble context from S3","    context_txt = \"\"","    for key in list_txt(PARSED_BUCKET):","        try:","            context_txt += f\"\\n\\n--- {key} ---\\n\\n{read_txt(PARSED_BUCKET, key)}\"","        except Exception as exc:","            context_txt += f\"\\n\\n--- Error reading {key}: {exc} ---\\n\\n\"","","    # 3. Build prompt & query model","    prompt = build_prompt(context_txt, question)","    # answer = query_llm(prompt)","","    # 4. Optionally truncate the prompt we echo back","    raw_reply =query_llm(prompt)          # ← returns one string, e.g. '{\"answer\":\"…\"}'","","    # --- 4. Extract the answer safely -----------------------------------","    try:","        # normal path: the model followed the rules","        final_answer = json.loads(raw_reply)[\"answer\"]","","    except (json.JSONDecodeError, KeyError):","        # model added extra text → grab the last {...}","        brace = raw_reply.rfind(\"{\")","        if brace != -1:","            final_answer = json.loads(raw_reply[brace:]).get(\"answer\", raw_reply)","        else:","            final_answer = raw_reply","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\":  \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\",","        },","        \"body\":","            json.dumps({","            \"question\": question,","            \"answer\":  final_answer        # ← echoed for debugging","        })","    }",""]}],[{"start":{"row":4,"column":55},"end":{"row":4,"column":89},"action":"remove","lines":["elroy-and-co-insurance-docs-parsed"],"id":40}],[{"start":{"row":4,"column":55},"end":{"row":4,"column":82},"action":"insert","lines":["elroy-and-co-medical-report"],"id":41}],[{"start":{"row":0,"column":0},"end":{"row":112,"column":0},"action":"remove","lines":["import json, os, boto3","from openai import OpenAI","","# ─── Config via env-vars ──────────────────────────────────────────────","PARSED_BUCKET       = os.environ.get(\"PARSED_BUCKET\", \"elroy-and-co-medical-report\")","SAMBANOVA_API_KEY   = \"d830ceb2-cd0a-464b-b6b0-82a5f5710746\"","SAMBANOVA_API_BASE  = os.environ.get(\"SAMBANOVA_API_BASE\", \"https://api.sambanova.ai/v1\")","MODEL_ID            = os.environ.get(\"MODEL_ID\", \"QwQ-32B\")","","# 0-to-disable, or e.g. 1500 to return first 1 500 chars only","PROMPT_PREVIEW_LEN  = int(os.environ.get(\"PROMPT_PREVIEW_LEN\", \"0\"))","","# ─── Clients ─────────────────────────────────────────────────────────","s3      = boto3.client(\"s3\")","client  = OpenAI(api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\", base_url=SAMBANOVA_API_BASE)","","# ─── Helpers ─────────────────────────────────────────────────────────","def list_txt(bucket: str) -> list[str]:","    keys = []","    paginator = s3.get_paginator(\"list_objects_v2\")","    for page in paginator.paginate(Bucket=bucket):","        keys.extend(k[\"Key\"] for k in page.get(\"Contents\", []) if k[\"Key\"].endswith(\".txt\"))","    return keys","","def read_txt(bucket: str, key: str) -> str:","    obj = s3.get_object(Bucket=bucket, Key=key)","    return obj[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context: str, question: str) -> str:","    return f\"\"\"","You are an expert insurance-policy assistant. Use **ONLY** the text in the CONTEXT to answer.","","RULES","1. Reply with valid JSON containing a single key \"answer\".","2. \"answer\" must be **exactly three short sentences** (≤ 20 words each):","   • Sentence 1 – start with Yes/No + conclusion.","   • Sentence 2 – cite one clause/page as evidence.","   • Sentence 3 – give next steps (claim form, deadline, etc.).","   - Dont include the reasoning in the answer","3. Output **nothing** outside that JSON object.","4. Remove any special characters","","","CONTEXT","{context}","","QUESTION","{question}","","Return only the JSON object described in rule 1.","\"\"\".strip()","","def query_llm(prompt: str) -> str:","    resp = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0,","        top_p=0.9,","    )","    return resp.choices[0].message.content","","# ─── Lambda entry-point ───────────────────────────────────────────────","def lambda_handler(event, context):","    # 1. Parse request","    try:","        body = event.get(\"body\", event)","        if isinstance(body, str):","            body = json.loads(body)","        question = body[\"question\"]","    except Exception as exc:","        return {\"statusCode\": 400, \"body\": json.dumps(f\"Invalid request: {exc}\")}","","    # 2. Assemble context from S3","    context_txt = \"\"","    for key in list_txt(PARSED_BUCKET):","        try:","            context_txt += f\"\\n\\n--- {key} ---\\n\\n{read_txt(PARSED_BUCKET, key)}\"","        except Exception as exc:","            context_txt += f\"\\n\\n--- Error reading {key}: {exc} ---\\n\\n\"","","    # 3. Build prompt & query model","    prompt = build_prompt(context_txt, question)","    # answer = query_llm(prompt)","","    # 4. Optionally truncate the prompt we echo back","    raw_reply =query_llm(prompt)          # ← returns one string, e.g. '{\"answer\":\"…\"}'","","    # --- 4. Extract the answer safely -----------------------------------","    try:","        # normal path: the model followed the rules","        final_answer = json.loads(raw_reply)[\"answer\"]","","    except (json.JSONDecodeError, KeyError):","        # model added extra text → grab the last {...}","        brace = raw_reply.rfind(\"{\")","        if brace != -1:","            final_answer = json.loads(raw_reply[brace:]).get(\"answer\", raw_reply)","        else:","            final_answer = raw_reply","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\":  \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\",","        },","        \"body\":","            json.dumps({","            \"question\": question,","            \"answer\":  final_answer        # ← echoed for debugging","        })","    }",""],"id":42},{"start":{"row":0,"column":0},"end":{"row":149,"column":0},"action":"insert","lines":["\"\"\"","lambda_function.py  –  “Gen-Z Doctor” medical-report Q&A (stateless)","","What it does","────────────","• Reads plain-text medical documents from an S3 bucket.","• Builds a prompt that forces an upbeat Gen-Z doctor persona to answer","  *only* from that context in super-simple language.","• Calls a SambaNova-hosted OpenAI-compatible model with retry/back-off.","• Returns just the three-sentence JSON answer.","","Environment variables (defaults in parentheses)","───────────────────────────────────────────────","AWS_REGION          (us-west-2)                    # region for S3","PARSED_BUCKET       (medical-docs-parsed)          # bucket with *.txt files","MODEL_ID            (QwQ-32B)","SAMBANOVA_API_KEY   (set this!)                    # your key","SAMBANOVA_API_BASE  (https://api.sambanova.ai/v1)","PROMPT_PREVIEW_LEN  (0)                            # >0 prints first N chars","MAX_RETRIES         (4)                            # LLM retry attempts","BASE_DELAY          (1.5)                          # sec for exponential back-off","\"\"\"","","import json, os, time, random","import boto3","from openai import OpenAI, RateLimitError","","# ─── Config ──────────────────────────────────────────────────────────","REGION            = os.getenv(\"AWS_REGION\", \"us-west-2\")","PARSED_BUCKET     = os.getenv(\"PARSED_BUCKET\", \"medical-docs-parsed\")","","MODEL_ID          = os.getenv(\"MODEL_ID\", \"QwQ-32B\")","SAMBANOVA_API_KEY = os.getenv(\"SAMBANOVA_API_KEY\", \"REPLACE_ME\")","SAMBANOVA_API_BASE= os.getenv(\"SAMBANOVA_API_BASE\", \"https://api.sambanova.ai/v1\")","","PROMPT_PREVIEW_LEN= int(os.getenv(\"PROMPT_PREVIEW_LEN\", \"0\"))","MAX_RETRIES       = int(os.getenv(\"MAX_RETRIES\", \"4\"))","BASE_DELAY        = float(os.getenv(\"BASE_DELAY\", \"1.5\"))","","# ─── AWS + model clients ─────────────────────────────────────────────","s3  = boto3.client(\"s3\", region_name=REGION)","ai  = OpenAI(api_key=SAMBANOVA_API_KEY, base_url=SAMBANOVA_API_BASE)","","","# ─── S3 helpers ──────────────────────────────────────────────────────","def list_txt(bucket):","    keys, pag = [], s3.get_paginator(\"list_objects_v2\")","    for page in pag.paginate(Bucket=bucket):","        keys += [o[\"Key\"] for o in page.get(\"Contents\", []) if o[\"Key\"].endswith(\".txt\")]","    return keys","","","def read_txt(bucket, key):","    return s3.get_object(Bucket=bucket, Key=key)[\"Body\"].read().decode()","","","# ─── Prompt builder ──────────────────────────────────────────────────","def build_prompt(context: str, question: str) -> str:","    \"\"\"","    Persona: upbeat Gen-Z doctor who explains medical jargon in plain English.","    Output: JSON with exactly one key \"answer\", three ≤20-word sentences.","    \"\"\"","","    return f\"\"\"","You’re an upbeat Gen-Z doctor. Use ONLY the text in CONTEXT to answer medical-report questions in plain, friendly terms.","","OUTPUT RULES","1. Return valid JSON with a single key \"answer\".","2. \"answer\" = exactly three sentences (each ≤20 words):","   • Sentence 1 – start with Yes/No + quick takeaway.","   • Sentence 2 – cite one clause/page (e.g. \"See Lab Results p. 3\").","   • Sentence 3 – next steps, simplified (\"Talk to your GP within 24 hrs\").","3. No other keys, markdown, or explanations.","4. Remove special characters. Keep language casual but clear.","","CONTEXT","{context}","","QUESTION","{question}","","Return ONLY the JSON object described above.","\"\"\".strip()","","","# ─── LLM call with retry/back-off ────────────────────────────────────","def ask_llm(prompt: str) -> str:","    for attempt in range(MAX_RETRIES):","        try:","            resp = ai.chat.completions.create(","                model       = MODEL_ID,","                messages    = [{\"role\": \"user\", \"content\": prompt}],","                temperature = 0.0,","                top_p       = 0.9,","            )","            return resp.choices[0].message.content","","        except RateLimitError:","            if attempt == MAX_RETRIES - 1:","                raise","            delay = BASE_DELAY ** attempt + random.random()","            print(f\"Rate-limited → retrying in {delay:.1f}s\")","            time.sleep(delay)","","","# ─── Lambda entry-point ──────────────────────────────────────────────","def lambda_handler(event, _ctx):","    # 1. Parse request","    body = event.get(\"body\", event)","    if isinstance(body, str):","        body = json.loads(body)","    question = body[\"question\"]","","    # 2. Gather context from S3","    context_txt = \"\"","    for key in list_txt(PARSED_BUCKET):","        try:","            context_txt += f\"\\n\\n--- {key} ---\\n\\n{read_txt(PARSED_BUCKET, key)}\"","        except Exception as e:","            context_txt += f\"\\n\\n--- Error reading {key}: {e} ---\\n\\n\"","","    # 3. Build prompt & query model","    prompt    = build_prompt(context_txt, question)","    raw_reply = ask_llm(prompt)","","    # 4. Extract clean answer","    try:","        final_answer = json.loads(raw_reply)[\"answer\"]","    except Exception:","        brace = raw_reply.rfind(\"{\")","        final_answer = json.loads(raw_reply[brace:]).get(\"answer\", raw_reply) if brace != -1 else raw_reply","","    # 5. Optional prompt preview for debugging","    if PROMPT_PREVIEW_LEN:","        print(\"PROMPT PREVIEW:\\n\", prompt[:PROMPT_PREVIEW_LEN] + (\"…\" if len(prompt) > PROMPT_PREVIEW_LEN else \"\"))","","    # 6. Return HTTP response","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\":  \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\",","        },","        \"body\": json.dumps({","            \"question\": question,","            \"answer\":   final_answer","        })","    }",""]}],[{"start":{"row":32,"column":52},"end":{"row":32,"column":62},"action":"remove","lines":["REPLACE_ME"],"id":43},{"start":{"row":32,"column":52},"end":{"row":32,"column":88},"action":"insert","lines":["d830ceb2-cd0a-464b-b6b0-82a5f5710746"]}],[{"start":{"row":29,"column":48},"end":{"row":29,"column":66},"action":"remove","lines":["medical-docs-parse"],"id":44}],[{"start":{"row":29,"column":48},"end":{"row":29,"column":49},"action":"remove","lines":["d"],"id":45}],[{"start":{"row":29,"column":48},"end":{"row":29,"column":75},"action":"insert","lines":["elroy-and-co-medical-report"],"id":46}],[{"start":{"row":69,"column":51},"end":{"row":69,"column":52},"action":"remove","lines":["y"],"id":47},{"start":{"row":69,"column":50},"end":{"row":69,"column":51},"action":"remove","lines":["a"]},{"start":{"row":69,"column":49},"end":{"row":69,"column":50},"action":"remove","lines":["w"]},{"start":{"row":69,"column":48},"end":{"row":69,"column":49},"action":"remove","lines":["a"]},{"start":{"row":69,"column":47},"end":{"row":69,"column":48},"action":"remove","lines":["e"]},{"start":{"row":69,"column":46},"end":{"row":69,"column":47},"action":"remove","lines":["k"]},{"start":{"row":69,"column":45},"end":{"row":69,"column":46},"action":"remove","lines":["a"]},{"start":{"row":69,"column":44},"end":{"row":69,"column":45},"action":"remove","lines":["t"]},{"start":{"row":69,"column":43},"end":{"row":69,"column":44},"action":"remove","lines":[" "]},{"start":{"row":69,"column":42},"end":{"row":69,"column":43},"action":"remove","lines":["k"]},{"start":{"row":69,"column":41},"end":{"row":69,"column":42},"action":"remove","lines":["c"]}],[{"start":{"row":69,"column":40},"end":{"row":69,"column":41},"action":"remove","lines":["i"],"id":48},{"start":{"row":69,"column":39},"end":{"row":69,"column":40},"action":"remove","lines":["u"]},{"start":{"row":69,"column":38},"end":{"row":69,"column":39},"action":"remove","lines":["q"]}],[{"start":{"row":69,"column":38},"end":{"row":69,"column":39},"action":"insert","lines":["e"],"id":49},{"start":{"row":69,"column":39},"end":{"row":69,"column":40},"action":"insert","lines":["x"]},{"start":{"row":69,"column":40},"end":{"row":69,"column":41},"action":"insert","lines":["p"]},{"start":{"row":69,"column":41},"end":{"row":69,"column":42},"action":"insert","lines":["l"]},{"start":{"row":69,"column":42},"end":{"row":69,"column":43},"action":"insert","lines":["a"]},{"start":{"row":69,"column":43},"end":{"row":69,"column":44},"action":"insert","lines":["n"]},{"start":{"row":69,"column":44},"end":{"row":69,"column":45},"action":"insert","lines":["t"]},{"start":{"row":69,"column":45},"end":{"row":69,"column":46},"action":"insert","lines":["i"]},{"start":{"row":69,"column":46},"end":{"row":69,"column":47},"action":"insert","lines":["o"]},{"start":{"row":69,"column":47},"end":{"row":69,"column":48},"action":"insert","lines":["n"]}],[{"start":{"row":69,"column":48},"end":{"row":69,"column":49},"action":"insert","lines":[" "],"id":50},{"start":{"row":69,"column":49},"end":{"row":69,"column":50},"action":"insert","lines":["i"]},{"start":{"row":69,"column":50},"end":{"row":69,"column":51},"action":"insert","lines":["n"]}],[{"start":{"row":69,"column":51},"end":{"row":69,"column":52},"action":"insert","lines":[" "],"id":51},{"start":{"row":69,"column":52},"end":{"row":69,"column":53},"action":"insert","lines":["g"]},{"start":{"row":69,"column":53},"end":{"row":69,"column":54},"action":"insert","lines":["e"]},{"start":{"row":69,"column":54},"end":{"row":69,"column":55},"action":"insert","lines":["n"]},{"start":{"row":69,"column":55},"end":{"row":69,"column":56},"action":"insert","lines":["x"]}],[{"start":{"row":69,"column":55},"end":{"row":69,"column":56},"action":"remove","lines":["x"],"id":52}],[{"start":{"row":69,"column":55},"end":{"row":69,"column":56},"action":"insert","lines":["z"],"id":53}],[{"start":{"row":69,"column":56},"end":{"row":69,"column":57},"action":"insert","lines":[" "],"id":54},{"start":{"row":69,"column":57},"end":{"row":69,"column":58},"action":"insert","lines":["s"]},{"start":{"row":69,"column":58},"end":{"row":69,"column":59},"action":"insert","lines":["l"]},{"start":{"row":69,"column":59},"end":{"row":69,"column":60},"action":"insert","lines":["a"]},{"start":{"row":69,"column":60},"end":{"row":69,"column":61},"action":"insert","lines":["g"]}],[{"start":{"row":69,"column":60},"end":{"row":69,"column":61},"action":"remove","lines":["g"],"id":55},{"start":{"row":69,"column":59},"end":{"row":69,"column":60},"action":"remove","lines":["a"]},{"start":{"row":69,"column":58},"end":{"row":69,"column":59},"action":"remove","lines":["l"]},{"start":{"row":69,"column":57},"end":{"row":69,"column":58},"action":"remove","lines":["s"]},{"start":{"row":69,"column":56},"end":{"row":69,"column":57},"action":"remove","lines":[" "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":19,"column":71},"end":{"row":19,"column":71},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750261440298,"hash":"5faaafb95adb8e60ac028288db57024900194c66"}