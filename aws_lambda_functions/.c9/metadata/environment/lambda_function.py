{"filter":false,"title":"lambda_function.py","tooltip":"/lambda_function.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["import boto3","import json","import os","from openai import OpenAI","","# S3 client for reading parsed policy documents","s3 = boto3.client(\"s3\")","","# S3 bucket with parsed .txt insurance documents","PARSED_BUCKET = \"elroy-and-co-insurance-docs-parsed\"","","# SambaNova-hosted model name (via OpenAI-compatible API)","MODEL_ID = \"Llama-4-Maverick-17B-128E-Instruct\"","SAMBANOVA_API_BASE = \"https://api.sambanova.ai/v1\"","","# Initialize the OpenAI-style client with SambaNova API key","client = OpenAI(","    api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\",","    base_url=SAMBANOVA_API_BASE,",")","","# List all .txt files in the parsed insurance document bucket","def list_txt_files(bucket):","    response = s3.list_objects_v2(Bucket=bucket)","    return [obj[\"Key\"] for obj in response.get(\"Contents\", []) if obj[\"Key\"].endswith(\".txt\")]","","# Download the content of each .txt file","def read_txt(bucket, key):","    response = s3.get_object(Bucket=bucket, Key=key)","    return response[\"Body\"].read().decode(\"utf-8\")","","# Construct the prompt for LLM","def build_prompt(context, question):","    return f\"\"\"","You are an AI assistant helping users understand their Prudential insurance coverage.","","### DOCUMENTS:","{context}","","### QUESTION:","{question}","","### ANSWER:","\"\"\"","","# Query SambaNova API via OpenAI client","def query_sambanova(prompt):","    response = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0.3,","        top_p=0.9","    )","    return response.choices[0].message.content","","# AWS Lambda entrypoint","def lambda_handler(event, context):","    question = event.get(\"question\")","    if not question:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Missing 'question' in request.\")","        }","","    combined_text = \"\"","    for key in list_txt_files(PARSED_BUCKET):","        try:","            text = read_txt(PARSED_BUCKET, key)","            combined_text += f\"\\n\\n--- {key} ---\\n\\n{text}\"","        except Exception as e:","            combined_text += f\"\\n\\n--- Error loading {key}: {str(e)} ---\\n\\n\"","","    prompt = build_prompt(combined_text, question)","    answer = query_sambanova(prompt)","","    return {","        \"statusCode\": 200,","        \"body\": json.dumps({","            \"question\": question,","            \"answer\": answer","        })","    }",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"remove","lines":["import boto3","import json","import os","from openai import OpenAI","","# S3 client for reading parsed policy documents","s3 = boto3.client(\"s3\")","","# S3 bucket with parsed .txt insurance documents","PARSED_BUCKET = \"elroy-and-co-insurance-docs-parsed\"","","# SambaNova-hosted model name (via OpenAI-compatible API)","MODEL_ID = \"Llama-4-Maverick-17B-128E-Instruct\"","SAMBANOVA_API_BASE = \"https://api.sambanova.ai/v1\"","","# Initialize the OpenAI-style client with SambaNova API key","client = OpenAI(","    api_key=\"d830ceb2-cd0a-464b-b6b0-82a5f5710746\",","    base_url=SAMBANOVA_API_BASE,",")","","# List all .txt files in the parsed insurance document bucket","def list_txt_files(bucket):","    response = s3.list_objects_v2(Bucket=bucket)","    return [obj[\"Key\"] for obj in response.get(\"Contents\", []) if obj[\"Key\"].endswith(\".txt\")]","","# Download the content of each .txt file","def read_txt(bucket, key):","    response = s3.get_object(Bucket=bucket, Key=key)","    return response[\"Body\"].read().decode(\"utf-8\")","","# Construct the prompt for LLM","def build_prompt(context, question):","    return f\"\"\"","You are an AI assistant helping users understand their Prudential insurance coverage.","","### DOCUMENTS:","{context}","","### QUESTION:","{question}","","### ANSWER:","\"\"\"","","# Query SambaNova API via OpenAI client","def query_sambanova(prompt):","    response = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0.3,","        top_p=0.9","    )","    return response.choices[0].message.content","","# AWS Lambda entrypoint","def lambda_handler(event, context):","    question = event.get(\"question\")","    if not question:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Missing 'question' in request.\")","        }","","    combined_text = \"\"","    for key in list_txt_files(PARSED_BUCKET):","        try:","            text = read_txt(PARSED_BUCKET, key)","            combined_text += f\"\\n\\n--- {key} ---\\n\\n{text}\"","        except Exception as e:","            combined_text += f\"\\n\\n--- Error loading {key}: {str(e)} ---\\n\\n\"","","    prompt = build_prompt(combined_text, question)","    answer = query_sambanova(prompt)","","    return {","        \"statusCode\": 200,","        \"body\": json.dumps({","            \"question\": question,","            \"answer\": answer","        })","    }",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["import boto3","import json","import os","from openai import OpenAI","","# Initialize S3 client","s3 = boto3.client(\"s3\")","","# Your bucket with pre-parsed .txt files from PDFs","PARSED_BUCKET = \"elroy-and-co-insurance-docs-parsed\"","","# SambaNova config","MODEL_ID = \"Llama-4-Maverick-17B-128E-Instruct\"","SAMBANOVA_API_BASE = \"https://api.sambanova.ai/v1\"","","client = OpenAI(","    api_key=os.environ[\"SAMBANOVA_API_KEY\"],","    base_url=SAMBANOVA_API_BASE,",")","","def list_txt_files(bucket):","    response = s3.list_objects_v2(Bucket=bucket)","    return [obj[\"Key\"] for obj in response.get(\"Contents\", []) if obj[\"Key\"].endswith(\".txt\")]","","def read_txt(bucket, key):","    response = s3.get_object(Bucket=bucket, Key=key)","    return response[\"Body\"].read().decode(\"utf-8\")","","def build_prompt(context, question):","    return f\"\"\"","You are an AI assistant helping users understand their Prudential insurance coverage.","","### DOCUMENTS:","{context}","","### QUESTION:","{question}","","### ANSWER:","\"\"\"","","def query_sambanova(prompt):","    response = client.chat.completions.create(","        model=MODEL_ID,","        messages=[{\"role\": \"user\", \"content\": prompt}],","        temperature=0.3,","        top_p=0.9","    )","    return response.choices[0].message.content","","def lambda_handler(event, context):","    try:","        body = event.get(\"body\")","        if isinstance(body, str):","            body = json.loads(body)","        question = body.get(\"question\")","    except Exception as e:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Invalid request structure.\")","        }","","    if not question:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps(\"Missing 'question' in request.\")","        }","","    # Read and merge context","    combined_text = \"\"","    for key in list_txt_files(PARSED_BUCKET):","        try:","            text = read_txt(PARSED_BUCKET, key)","            combined_text += f\"\\n\\n--- {key} ---\\n\\n{text}\"","        except Exception as e:","            combined_text += f\"\\n\\n--- Error reading {key}: {str(e)} ---\\n\\n\"","","    # Build prompt and query LLM","    prompt = build_prompt(combined_text, question)","    answer = query_sambanova(prompt)","","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Access-Control-Allow-Origin\": \"*\",","            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",","            \"Access-Control-Allow-Headers\": \"Content-Type\"","        },","        \"body\": json.dumps({","            \"question\": question,","            \"answer\": answer","        })","    }",""]}],[{"start":{"row":16,"column":13},"end":{"row":16,"column":44},"action":"remove","lines":["s.environ[\"SAMBANOVA_API_KEY\"],"],"id":3},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"remove","lines":["o"]}],[{"start":{"row":16,"column":12},"end":{"row":16,"column":14},"action":"insert","lines":["\"\""],"id":4}],[{"start":{"row":16,"column":13},"end":{"row":16,"column":49},"action":"insert","lines":["d830ceb2-cd0a-464b-b6b0-82a5f5710746"],"id":5}],[{"start":{"row":16,"column":50},"end":{"row":16,"column":51},"action":"insert","lines":[","],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":27,"column":0},"end":{"row":27,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750184588421,"hash":"a31ac8a96f63795c5e55aef52ee77370a9fdb0cc"}